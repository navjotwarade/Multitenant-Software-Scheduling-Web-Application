{"changed":false,"filter":false,"title":"express","tooltip":"/node_modules/express/bin/express","value":"#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar exec = require('child_process').exec\n  , program = require('commander')\n  , mkdirp = require('mkdirp')\n  , pkg = require('../package.json')\n  , version = pkg.version\n  , os = require('os')\n  , fs = require('fs');\n\n// CLI\n\nprogram\n  .version(version)\n  .option('-s, --sessions', 'add session support')\n  .option('-e, --ejs', 'add ejs engine support (defaults to jade)')\n  .option('-J, --jshtml', 'add jshtml engine support (defaults to jade)')\n  .option('-H, --hogan', 'add hogan.js engine support')\n  .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus) (defaults to plain css)')\n  .option('-f, --force', 'force on non-empty directory')\n  .parse(process.argv);\n\n// Path\n\nvar path = program.args.shift() || '.';\n\n// end-of-line code\n\nvar eol = os.EOL\n\n// Template engine\n\nprogram.template = 'jade';\nif (program.ejs) program.template = 'ejs';\nif (program.jshtml) program.template = 'jshtml';\nif (program.hogan) program.template = 'hjs';\n\n/**\n * Routes index template.\n */\n\nvar index = [\n    ''\n  , '/*'\n  , ' * GET home page.'\n  , ' */'\n  , ''\n  , 'exports.index = function(req, res){'\n  , '  res.render(\\'index\\', { title: \\'Express\\' });'\n  , '};'\n].join(eol);\n\n/**\n * Routes users template.\n */\n\nvar users = [\n    ''\n  , '/*'\n  , ' * GET users listing.'\n  , ' */'\n  , ''\n  , 'exports.list = function(req, res){'\n  , '  res.send(\"respond with a resource\");'\n  , '};'\n].join(eol);\n\n/**\n * Jade layout template.\n */\n\nvar jadeLayout = [\n    'doctype 5'\n  , 'html'\n  , '  head'\n  , '    title= title'\n  , '    link(rel=\\'stylesheet\\', href=\\'/stylesheets/style.css\\')'\n  , '  body'\n  , '    block content'\n].join(eol);\n\n/**\n * Jade index template.\n */\n\nvar jadeIndex = [\n    'extends layout'\n  , ''\n  , 'block content'\n  , '  h1= title'\n  , '  p Welcome to #{title}'\n].join(eol);\n\n/**\n * EJS index template.\n */\n\nvar ejsIndex = [\n    '<!DOCTYPE html>'\n  , '<html>'\n  , '  <head>'\n  , '    <title><%= title %></title>'\n  , '    <link rel=\\'stylesheet\\' href=\\'/stylesheets/style.css\\' />'\n  , '  </head>'\n  , '  <body>'\n  , '    <h1><%= title %></h1>'\n  , '    <p>Welcome to <%= title %></p>'\n  , '  </body>'\n  , '</html>'\n].join(eol);\n\n/**\n * JSHTML layout template.\n */\n\nvar jshtmlLayout = [\n    '<!DOCTYPE html>'\n  , '<html>'\n  , '  <head>'\n  , '    <title> @write(title) </title>'\n  , '    <link rel=\\'stylesheet\\' href=\\'/stylesheets/style.css\\' />'\n  , '  </head>'\n  , '  <body>'\n  , '    @write(body)'\n  , '  </body>'\n  , '</html>'\n].join(eol);\n\n/**\n * JSHTML index template.\n */\n\nvar jshtmlIndex = [\n    '<h1>@write(title)</h1>'\n  , '<p>Welcome to @write(title)</p>'\n].join(eol);\n\n/**\n * Hogan.js index template.\n */\nvar hoganIndex = [\n    '<!DOCTYPE html>'\n  , '<html>'\n  , '  <head>'\n  , '    <title>{{ title }}</title>'\n  , '    <link rel=\\'stylesheet\\' href=\\'/stylesheets/style.css\\' />'\n  , '  </head>'\n  , '  <body>'\n  , '    <h1>{{ title }}</h1>'\n  , '    <p>Welcome to {{ title }}</p>'\n  , '  </body>'\n  , '</html>'\n].join(eol);\n\n/**\n * Default css template.\n */\n\nvar css = [\n    'body {'\n  , '  padding: 50px;'\n  , '  font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;'\n  , '}'\n  , ''\n  , 'a {'\n  , '  color: #00B7FF;'\n  , '}'\n].join(eol);\n\n/**\n * Default less template.\n */\n\nvar less = [\n    'body {'\n  , '  padding: 50px;'\n  , '  font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;'\n  , '}'\n  , ''\n  , 'a {'\n  , '  color: #00B7FF;'\n  , '}'\n].join(eol);\n\n/**\n * Default stylus template.\n */\n\nvar stylus = [\n    'body'\n  , '  padding: 50px'\n  , '  font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif'\n  , 'a'\n  , '  color: #00B7FF'\n].join(eol);\n\n/**\n * App template.\n */\n\nvar app = [\n    ''\n  , '/**'\n  , ' * Module dependencies.'\n  , ' */'\n  , ''\n  , 'var express = require(\\'express\\')'\n  , '  , routes = require(\\'./routes\\')'\n  , '  , user = require(\\'./routes/user\\')'\n  , '  , http = require(\\'http\\')'\n  , '  , path = require(\\'path\\');'\n  , ''\n  , 'var app = express();'\n  , ''\n  , '// all environments'\n  , 'app.set(\\'port\\', process.env.PORT || 3000);'\n  , 'app.set(\\'views\\', __dirname + \\'/views\\');'\n  , 'app.set(\\'view engine\\', \\':TEMPLATE\\');'\n  , 'app.use(express.favicon());'\n  , 'app.use(express.logger(\\'dev\\'));'\n  , 'app.use(express.bodyParser());'\n  , 'app.use(express.methodOverride());{sess}'\n  , 'app.use(app.router);{css}'\n  , 'app.use(express.static(path.join(__dirname, \\'public\\')));'\n  , ''\n  , '// development only'\n  , 'if (\\'development\\' == app.get(\\'env\\')) {'\n  , '  app.use(express.errorHandler());'\n  , '}'\n  , ''\n  , 'app.get(\\'/\\', routes.index);'\n  , 'app.get(\\'/users\\', user.list);'\n  , ''\n  , 'http.createServer(app).listen(app.get(\\'port\\'), function(){'\n  , '  console.log(\\'Express server listening on port \\' + app.get(\\'port\\'));'\n  , '});'\n  , ''\n].join(eol);\n\n// Generate application\n\n(function createApplication(path) {\n  emptyDirectory(path, function(empty){\n    if (empty || program.force) {\n      createApplicationAt(path);\n    } else {\n      program.confirm('destination is not empty, continue? ', function(ok){\n        if (ok) {\n          process.stdin.destroy();\n          createApplicationAt(path);\n        } else {\n          abort('aborting');\n        }\n      });\n    }\n  });\n})(path);\n\n/**\n * Create application at the given directory `path`.\n *\n * @param {String} path\n */\n\nfunction createApplicationAt(path) {\n  console.log();\n  process.on('exit', function(){\n    console.log();\n    console.log('   install dependencies:');\n    console.log('     $ cd %s && npm install', path);\n    console.log();\n    console.log('   run the app:');\n    console.log('     $ node app');\n    console.log();\n  });\n\n  mkdir(path, function(){\n    mkdir(path + '/public');\n    mkdir(path + '/public/javascripts');\n    mkdir(path + '/public/images');\n    mkdir(path + '/public/stylesheets', function(){\n      switch (program.css) {\n        case 'less':\n          write(path + '/public/stylesheets/style.less', less);\n          break;\n        case 'stylus':\n          write(path + '/public/stylesheets/style.styl', stylus);\n          break;\n        default:\n          write(path + '/public/stylesheets/style.css', css);\n      }\n    });\n\n    mkdir(path + '/routes', function(){\n      write(path + '/routes/index.js', index);\n      write(path + '/routes/user.js', users);\n    });\n\n    mkdir(path + '/views', function(){\n      switch (program.template) {\n        case 'ejs':\n          write(path + '/views/index.ejs', ejsIndex);\n          break;\n        case 'jade':\n          write(path + '/views/layout.jade', jadeLayout);\n          write(path + '/views/index.jade', jadeIndex);\n          break;\n        case 'jshtml':\n          write(path + '/views/layout.jshtml', jshtmlLayout);\n          write(path + '/views/index.jshtml', jshtmlIndex);\n          break;\n        case 'hjs':\n          write(path + '/views/index.hjs', hoganIndex);\n          break;\n\n      }\n    });\n\n    // CSS Engine support\n    switch (program.css) {\n      case 'less':\n        app = app.replace('{css}', eol + 'app.use(require(\\'less-middleware\\')({ src: __dirname + \\'/public\\' }));');\n        break;\n      case 'stylus':\n        app = app.replace('{css}', eol + 'app.use(require(\\'stylus\\').middleware(__dirname + \\'/public\\'));');\n        break;\n      default:\n        app = app.replace('{css}', '');\n    }\n\n    // Session support\n    app = app.replace('{sess}', program.sessions\n      ? eol + 'app.use(express.cookieParser(\\'your secret here\\'));' + eol + 'app.use(express.session());'\n      : '');\n\n    // Template support\n    app = app.replace(':TEMPLATE', program.template);\n\n    // package.json\n    var pkg = {\n        name: 'application-name'\n      , version: '0.0.1'\n      , private: true\n      , scripts: { start: 'node app.js' }\n      , dependencies: {\n        express: version\n      }\n    }\n\n    if (program.template) pkg.dependencies[program.template] = '*';\n\n    // CSS Engine support\n    switch (program.css) {\n      case 'less':\n        pkg.dependencies['less-middleware'] = '*';\n        break;\n      default:\n        if (program.css) {\n          pkg.dependencies[program.css] = '*';\n        }\n    }\n\n    write(path + '/package.json', JSON.stringify(pkg, null, 2));\n    write(path + '/app.js', app);\n  });\n}\n\n/**\n * Check if the given directory `path` is empty.\n *\n * @param {String} path\n * @param {Function} fn\n */\n\nfunction emptyDirectory(path, fn) {\n  fs.readdir(path, function(err, files){\n    if (err && 'ENOENT' != err.code) throw err;\n    fn(!files || !files.length);\n  });\n}\n\n/**\n * echo str > path.\n *\n * @param {String} path\n * @param {String} str\n */\n\nfunction write(path, str) {\n  fs.writeFile(path, str);\n  console.log('   \\x1b[36mcreate\\x1b[0m : ' + path);\n}\n\n/**\n * Mkdir -p.\n *\n * @param {String} path\n * @param {Function} fn\n */\n\nfunction mkdir(path, fn) {\n  mkdirp(path, 0755, function(err){\n    if (err) throw err;\n    console.log('   \\033[36mcreate\\033[0m : ' + path);\n    fn && fn();\n  });\n}\n\n/**\n * Exit with the given `str`.\n *\n * @param {String} str\n */\n\nfunction abort(str) {\n  console.error(str);\n  process.exit(1);\n}\n","undoManager":{"stack":[],"mark":-1,"position":-1},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":322,"column":25},"end":{"row":323,"column":26},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1370213263000}